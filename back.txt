1.1.1	目标生成算法

1.1.2	单一目标前推算法

1.1.3	单一目标后推算法

1.1.4	目标合成算法


const enum	INFO_FUN{ 
	INFO_INFOGO1 = FINFO * FUN_MAX, 
	INFO_INFOGO2, INFO_SCAN, INFO_MOVE, 
	INFO_PARTITION, INFO_LASTPARTITION, INFO_CLUSTER, 
	INFO_AREA, INFO_FUN_SIZE}; 
	
const enum	BB_FUN{ 
	BB_BITB1 = FBB*FUN_MAX, 
	BB_BITB2, BB_BITB3, BB_RANDOM, BB_ONLY, BB_COUNT, BB_BLOCKCOUNT, 
	BB_BLOCKAT, BB_TRANSPOSE, BB_ROTATE, BB_RANGE, BB_RANGEMASK, 
	BB_DILATE, BB_ERODE, BB_DRY, BB_ADSORB, BB_INNER, BB_NOTBIGGER, 
	BB_RUBOFF1, BB_RUBOFF2, BB_CLOSE, BB_OPEN, BB_BLOCKON, 
	BB_TOUCHBOARDER, BB_CONTAIN, BB_KEYPOS, BB_JOINTPOS, BB_ENCODE32, 
	BB_PEMIS3232, BB_PEMIS64, BB_EYEKIND, BB_FUN_SIZE}; 

		/*
		BITB bb = kill|pos; 
		for(int i = 0; i<4; ++i)
			if(cornermask[i].contain(bb)){ 
				ITR itr(bb); 
				for(POS p = itr.stonebegin(); !itr.stoneend(); p = itr.stonenext())
					corner[i] ^= p; 
				break; 
			}
		for(int i = 0; i<4; ++i) 
			if(edgemask[i].contain(bb)){ 
				ITR itr(bb); 
				for(POS p = itr.stonebegin(); !itr.stoneend(); p = itr.stonenext())
					edge[i] ^= p; 
			}
		if(fusekimask.contain(bb){ 
			ITR itr(bb); 
			for(POS p = itr.stonebegin(); !itr.stoneend(); p = itr.stonenext())
				fuseki ^= p; 
		}
		*/
   	/*
	static BITB cornermask[4]; 
	static BITB edgemask[4]; 
	static BITB fusekimask; 
	KEY corner[4]; 
	KEY edge[4]; 
	KEY fuseki; 
	*/

, /*
		___COUT4(go, go.gethistory(), t, t.gethistory()); 
		___.tic("Asserting the members..."); 
		___ASSERT2(go.xx == t.xx, 
			___COUT2(go.xx, t.xx)); 
		___ASSERT2(go.oo == t.oo, 
			___COUT2(go.oo, t.oo)); 
		___ASSERT2(go.gethotko() == t.gethotko(), 
			___COUT2(go.gethotko(), t.gethotko())); 
		___ASSERT2(go.getkill() == t.getkill(), 
			___COUT2(go.getkill(), t.getkill())); 
		___ASSERT2(go.gethistory() == t.gethistory(), 
			___COUT2(go.gethistory(), t.gethistory())); 
		___ASSERT2(go.getlastclr() == t.getlastclr(), 
			___COUT2(go.getlastclr(), t.getlastclr())); 
		___ASSERT2(go.getlastpos() == t.getlastpos(), 
			___COUT2(go.getlastpos(), t.getlastpos())); 
		___.toc(); 
		*/

		/*
			*/
	
			___COUT6(
			t, 
			t.gethotko(), 
			go.gethotko(), 
			go.getkill().count(), 
			go.libertysite(go.getlastpos()).count(), 
			go.getbb(go.getlastclr()).blockat(go.getlastpos()).count()
			)
			
		/*
	bool	cN1, cN2, cN3, 
			cS1, cS2, cS3, 
			cE1, cE2, cE3, 
			cW1, cW2, cW3; 
			*/
	/*
	cN1 = (cN == EMPTY), cn2 = (cN == clr), cN3 = (cN != clr); 
	cS1 = (cS == EMPTY), cn2 = (cS == clr), cS3 = (cS != clr); 
	cE1 = (cE == EMPTY), cn2 = (cE == clr), cE3 = (cE != clr); 
	cW1 = (cW == EMPTY), cn2 = (cW == clr), cW3 = (cW != clr); 
	*/
		
			
	//有气
	if(cN == EMPTY || cS == EMPTY || cE == EMPTY || cW == EMPTY)        
		return 1; 
	//可融合成有气的块
	if(((cN == clr) && !onlyN)
 || ((cS == clr) && !onlyS)
 || ((cE == clr) && !onlyE)
 || ((cW == clr) && !onlyW)
		)
		return 1; 
	//可提
	if((cN != clr) && onlyN 
 || (cS != clr) && onlyS 
 || (cE != clr) && onlyE
 || (cW != clr) && onlyW
		) 
		return 1; 
	//自杀
	return 0; 
